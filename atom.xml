<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Visow Blog</title>
  <icon>https://www.gravatar.com/avatar/00a289d56144ecc1c1810efdffb9b299</icon>
  <subtitle>772673848@qq.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://Visow.github.io/"/>
  <updated>2018-06-20T14:33:51.106Z</updated>
  <id>https://Visow.github.io/</id>
  
  <author>
    <name>Visow</name>
    <email>772673848@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pomelo + vscode + typescript搭建可约束可调试的游戏服务端框架</title>
    <link href="https://Visow.github.io/2018/06/18/pomelo-1/"/>
    <id>https://Visow.github.io/2018/06/18/pomelo-1/</id>
    <published>2018-06-18T14:33:12.000Z</published>
    <updated>2018-06-20T14:33:51.106Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>pomelo: 它是网易开源的一套基于Node.js的游戏服务端框架，详情<a href="http://pomelo.netease.com/" target="_blank" rel="noopener">请戳这里</a>关于pomelo的种种这里不详细说。点击链接查看详情。但是由于pomelo是js项目，使用起来的时候并不是很爽，所以就有了ts的引入。</p><p>typescript: TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。换而言之，TypeScript是在JavaScript的基础上添加了语法糖，使其在使用的过程中完成了语法和类型的检测，同时达到更便利的代码提示。本质上typeScript在运行前是需要通过tsc编译成Javascript，然后运行。所以TS的最大便利是在使用的过程，而本质还是JS。对于TS的更多相关信息，自行脑补。</p><p>vscode: Visual Studio Code (简称 VS Code / VSC) 是一款免费开源的现代化轻量级代码编辑器，支持几乎所有主流的开发语言的语法高亮、智能代码补全、自定义热键、括号匹配、代码片段、代码对比 Diff、GIT 等特性，支持插件扩展，并针对网页开发和云端应用开发做了优化。软件跨平台支持 Win、Mac 以及 Linux。<a href="http://www.vscode.org/" target="_blank" rel="noopener">VSC中文网</a>,用过的都知道它的好~~~</p><p>所以前面说了这么多，其实就是在讲，想这么干的往下看。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h3><ol><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vscode</a></li><li><a href="http://pomelo.netease.com/" target="_blank" rel="noopener">pomelo</a></li><li><a href="https://www.tslang.cn/" target="_blank" rel="noopener">typescript</a></li></ol><h3 id="新建一个Pomelo项目"><a href="#新建一个Pomelo项目" class="headerlink" title="新建一个Pomelo项目"></a>新建一个Pomelo项目</h3><ol><li>新建一个文件夹</li><li><p>进入该文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$ pomelo init</span><br><span class="line"></span><br><span class="line">The default admin user is:</span><br><span class="line"></span><br><span class="line">  username: admin</span><br><span class="line">  password: admin</span><br><span class="line"></span><br><span class="line">You can configure admin users by editing adminUser.json later.</span><br><span class="line"></span><br><span class="line">Please select underly connector, 1 <span class="keyword">for</span> websocket(native socket), 2 <span class="keyword">for</span> socket.io, 3 <span class="keyword">for</span> wss, 4 <span class="keyword">for</span> socket.io(wss), 5 <span class="keyword">for</span> udp, 6 <span class="keyword">for</span> mqtt: [1]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择使用的网络模式</span></span><br><span class="line">$ 1</span><br><span class="line"></span><br><span class="line">    create : E:\pomelo\<span class="built_in">test</span>\npm-install.bat</span><br><span class="line">    create : E:\pomelo\<span class="built_in">test</span>\npm-install.sh</span><br><span class="line">    create : E:\pomelo\<span class="built_in">test</span>\web-server</span><br><span class="line">    create : E:\pomelo\<span class="built_in">test</span>\shared</span><br><span class="line"><span class="comment">#... 省略部分输出</span></span><br><span class="line">    create : E:\pomelo\Test\web-server\public\js\lib\<span class="built_in">local</span>\boot</span><br><span class="line">    create : E:\pomelo\Test\web-server\public\js\lib\<span class="built_in">local</span>\boot\component.json</span><br><span class="line">    create : E:\pomelo\Test\web-server\public\js\lib\<span class="built_in">local</span>\boot\index.js</span><br></pre></td></tr></table></figure></li><li><p>windows用户执行项目文件夹下的 “npm-install.bat”,  shell 用户执行文件夹下的 “npm-install.sh” 进行依赖安装，初始化pomelo项目.</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">E:\pomelo\<span class="built_in">test</span>&gt;npm-install.bat</span><br><span class="line">npm info it worked <span class="keyword">if</span> it ends with ok</span><br><span class="line">npm info using npm@5.6.0</span><br><span class="line">npm info using node@v8.11.1</span><br><span class="line"><span class="comment">#... 省略部分输出</span></span><br><span class="line"></span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">npm info lifecycle undefined~postshrinkwrap: undefined</span><br><span class="line">npm WARN Test@0.0.1 No description</span><br><span class="line">npm WARN Test@0.0.1 No repository field.</span><br><span class="line">npm WARN Test@0.0.1 No license field.</span><br><span class="line"><span class="comment">#... 省略部分输出</span></span><br><span class="line">added 29 packages <span class="keyword">in</span> 3.713s</span><br><span class="line">npm info lifecycle undefined~postshrinkwrap: undefined</span><br><span class="line">npm WARN Test@0.0.1 No description</span><br><span class="line">npm WARN Test@0.0.1 No repository field.</span><br><span class="line">npm WARN Test@0.0.1 No license field.</span><br><span class="line"></span><br><span class="line">added 312 packages <span class="keyword">in</span> 29.82s</span><br><span class="line">npm info ok</span><br><span class="line"></span><br><span class="line">E:\pomelo\<span class="built_in">test</span>\game-server&gt;</span><br></pre></td></tr></table></figure><p>至此pomelo项目创建成功。<br>接下来测试一下项目是否正确可行。</p><ol start="4"><li>试运行pomelo项目<br>a. 进入到项目目录下的game-server文件夹执行app.js<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> game-server</span><br><span class="line">$ node app</span><br><span class="line"></span><br><span class="line">[2018-06-20 22:05:45.215] [INFO] pomelo - [E:\pomelo\Test\game-server\node_modules\pomelo\lib\application.js] application inited: <span class="string">"master-server-1"</span></span><br><span class="line">[2018-06-20 22:05:45.325] [INFO] pomelo-admin - [MqttServer] [MqttServer] listen on 3005</span><br><span class="line">[2018-06-20 22:05:45.328] [INFO] pomelo - [E:\pomelo\Test\game-server\node_modules\pomelo\lib\master\starter.js] Executing D:\Program Files\nodejs\node.exe E:\pomelo\Test\game-server\app,env=development,id=connector-server-1,host=127.0.0.1,port=3150,clientHost=127.0.0.1,clientPort=3010,frontend=<span class="literal">true</span>,serverType=connector locally</span><br><span class="line">[2018-06-20 22:05:45.332] [INFO] pomelo-admin - [ConsoleService] try to connect master: <span class="string">"master"</span>, <span class="string">"127.0.0.1"</span>, 3005</span><br><span class="line">[2018-06-20 22:05:45.372] [DEBUG] pomelo - [E:\pomelo\Test\game-server\node_modules\pomelo\lib\modules\masterwatcher.js] masterwatcher receive add server </span><br><span class="line"><span class="comment">#... 省略部分输出</span></span><br><span class="line">[2018-06-20 22:05:45.715] [INFO] pomelo - [E:\pomelo\Test\game-server\node_modules\pomelo\lib\master\watchdog.js] all servers startup <span class="keyword">in</span> 485 ms</span><br></pre></td></tr></table></figure></li></ol><p>看到 all servers startup in 485 ms 了没有，说明服务器启动成功了。</p><p>b. 有服务器肯定会有前端，前端就是项目根目录下的web-server文件夹，了解一下。进入到web-server文件夹，启动前端服务。<br>新建一个控制台<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> web-server</span><br><span class="line">$ node app</span><br><span class="line"></span><br><span class="line">Warning: express.createServer() is deprecated, express</span><br><span class="line">applications no longer inherit from http.Server,</span><br><span class="line">please use:</span><br><span class="line"></span><br><span class="line">  var express = require(<span class="string">"express"</span>);</span><br><span class="line">  var app = express();</span><br><span class="line"></span><br><span class="line">connect.multipart() will be removed <span class="keyword">in</span> connect 3.0</span><br><span class="line">visit https://github.com/senchalabs/connect/wiki/Connect-3.0 <span class="keyword">for</span> alternatives</span><br><span class="line">connect.limit() will be removed <span class="keyword">in</span> connect 3.0</span><br><span class="line">Web server has started.</span><br><span class="line">Please <span class="built_in">log</span> on http://127.0.0.1:3001/index.html</span><br></pre></td></tr></table></figure></p><p>其中的警告是说：’express.createServer()’ 方法已经废弃，请使用下面的‘  var express = require(“express”); var app = express();’这是因为项目的模板比较旧没有进行更新，而新版本的express已经废弃了该方法，但是目前还不影响使用，先不管它。</p><p>好了，前端也跑起来了，输入链接测试：<a href="http://127.0.0.1:3001/index.html" target="_blank" rel="noopener">http://127.0.0.1:3001/index.html</a><br>看到下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/pomelo-1/pomelo1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> 表示前端启动成功了。</p><p>点击”Test Game Server”按钮，测试后端。<br>看到下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/pomelo-1/pomelo2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure> 表示服务端也启动成功。</p><p>如果出现启动失败请查看输出，自行百度解决，一般是由于模块没有安装完整，或者端口被占用的问题。如果又要请留言。</p><p>然后开始第二阶段，项目改造，接入TS。</p><h3 id="改造项目为TypeScript"><a href="#改造项目为TypeScript" class="headerlink" title="改造项目为TypeScript"></a>改造项目为TypeScript</h3><ol><li>用VSCode打开 game-server 项目</li><li>在game-server目录下新建一个app_types文件夹。</li><li>在文件夹内添加ts配置文件“tsconfig.json”。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h2&gt;&lt;p&gt;pomelo: 它是网易开源的一套基于Node.js的游戏服务端框架，详情&lt;a href=&quot;http://pomelo.ne
      
    
    </summary>
    
    
      <category term="pomelo" scheme="https://Visow.github.io/tags/pomelo/"/>
    
  </entry>
  
  <entry>
    <title>本博客搭建方法</title>
    <link href="https://Visow.github.io/2018/06/18/2018-6-18/"/>
    <id>https://Visow.github.io/2018/06/18/2018-6-18/</id>
    <published>2018-06-17T17:12:25.000Z</published>
    <updated>2018-06-18T14:44:58.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h2><p>本博客是使用Hexo + gitHub搭建的个人博客。其中致谢于以下俩位道友：<br>csdn z皓: <a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">使用Hexo+github一步步搭建数以自己的博客</a><br>主题提供者 yscoder:<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">一个Material Design风格的Hexo主题。</a><br>首先是Hexo+gitHub的使用安装及配置问题。由于z道友教程中内容比较详细，所以这边简单的重复一下。再次感谢道友提供的教程。<br>然后第二部分是主题的安装。<br><a id="more"></a></p><h2 id="技术准备"><a href="#技术准备" class="headerlink" title="技术准备"></a>技术准备</h2><h3 id="Node-js-6-x"><a href="#Node-js-6-x" class="headerlink" title="Node.js 6.x+"></a>Node.js 6.x+</h3><p>使用本博客需要6.x+以上版本的Node.js<br><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>Node相关安装教程请自行百度或者谷歌，如需帮助请邮件。</p><h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>通过gitHub的page来作为博客的站点，可以使用自己的服务器或者其他服务器来搭建。</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">git官网</a><br><a href="https://pan.baidu.com/s/1H50aC_kApHGeXa4godkn3w" target="_blank" rel="noopener">totroiseGit</a>在我个人网盘 密码：wn8s，如果链接失效请告知，相关安装请自行百度或者谷歌。如需帮助请邮件。</p><h3 id="检测Node以及git的安装情况"><a href="#检测Node以及git的安装情况" class="headerlink" title="检测Node以及git的安装情况"></a>检测Node以及git的安装情况</h3><p>在命令行模式下分别执行一下命令检测安装情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"node -v"</span></span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"npm -v"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"git --version"</span></span><br></pre></td></tr></table></figure><p>如果没有任何报错，并且给出对应的版本号则表示安装正确。<br>如果出现错误，请自行百度或者谷歌。如需帮助请邮件。<br>接着就是按照z道友的教程安装Hexo环境，以及配置gitHub项目。</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>首先创建Blog文件夹。然后进入该文件夹，执行命令安装hexo 模块<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> <span class="string">'your blog path'</span></span><br><span class="line">$ npm install hexo -g</span><br></pre></td></tr></table></figure></p><p>检测Hexo安装情况<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heox -v</span><br></pre></td></tr></table></figure></p><p>确认hexo安装成功，在项目文件夹中初始化Hexo项目<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ heox init</span><br></pre></td></tr></table></figure></p><p>成功后如图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1108615-20171021230241646-1660449756.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>看到后面的“Start blogging with Hexo！” 表示hexo项目初始化成功。</p><p>然后是Node项目的正常流程，初始化依赖的组件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>首次体验Hexo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line"></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded <span class="keyword">in</span> 239 ms</span><br><span class="line">INFO  Generated: index.html</span><br><span class="line">INFO  Generated: archives/index.html</span><br><span class="line">INFO  Generated: fancybox/blank.gif</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.js</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.pack.js</span><br><span class="line">INFO  Generated: fancybox/fancybox_overlay.png</span><br><span class="line">INFO  Generated: fancybox/fancybox_loading@2x.gif</span><br><span class="line">INFO  Generated: fancybox/fancybox_sprite.png</span><br><span class="line">INFO  Generated: fancybox/fancybox_sprite@2x.png</span><br><span class="line">INFO  Generated: fancybox/fancybox_loading.gif</span><br><span class="line">INFO  Generated: fancybox/jquery.fancybox.css</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.woff</span><br><span class="line">INFO  Generated: js/script.js</span><br><span class="line">INFO  Generated: archives/2018/06/index.html</span><br><span class="line">INFO  Generated: css/style.css</span><br><span class="line">INFO  Generated: archives/2018/index.html</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.css</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-media.js</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-buttons.js</span><br><span class="line">INFO  Generated: css/fonts/FontAwesome.otf</span><br><span class="line">INFO  Generated: fancybox/helpers/fancybox_buttons.png</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.eot</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.svg</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.js</span><br><span class="line">INFO  Generated: css/fonts/fontawesome-webfont.ttf</span><br><span class="line">INFO  Generated: fancybox/helpers/jquery.fancybox-thumbs.css</span><br><span class="line">INFO  Generated: css/images/banner.jpg</span><br><span class="line">INFO  Generated: 2018/06/18/hello-world/index.html</span><br><span class="line">INFO  28 files generated <span class="keyword">in</span> 521 ms</span><br></pre></td></tr></table></figure></p><p>开启服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line"></span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></p><p>到此可以正式体验Hexo了。<br>如果失败请检查是否端口被占用问题， 如果是端口被占用，可以通过如下命令修改hexo端口:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server -p 端口号</span><br></pre></td></tr></table></figure></p><p>如果步骤没有错的的，则最终效果如图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1108615-20171021232413224-1288183746.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h3 id="Github-page"><a href="#Github-page" class="headerlink" title="Github page"></a>Github page</h3><p>首先呢，你需要一个GitHub账号。如果没有请跳过。。。。<br>设置git账号：在博客根目录下运行命令行工具。推荐git自带的gitbase.<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1529319344.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>设置账号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git config --global user.name &quot;your git name&quot;</span><br></pre></td></tr></table></figure></p><p>设置邮箱：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$git config --global user.email &quot;your git email&quot;</span><br></pre></td></tr></table></figure></p><p>创建ssh:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"your git email"</span></span><br></pre></td></tr></table></figure></p><p>连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。</p><p>添加密钥到ssh-agent<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br></pre></td></tr></table></figure></p><p>添加生成的SSH key到ssh-agent:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p><p>登录Github，点击头像下的settings，添加ssh<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1108615-20171021234636834-426105098.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1108615-20171021234906724-1938556332.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>添加完github的 ssh key后，回到项目文件夹根目录的命令行工具：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line"></span><br><span class="line">Hi Visow! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure></p><p>如果出现 Hi “you git name”则表示ssh添加成功！</p><p>假如ssh-key配置失败，那么只要以下步骤就能完全解决</p><p>首先，清除所有的key-pair：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -D</span><br><span class="line">$ rm -r ~/.ssh</span><br></pre></td></tr></table></figure></p><p>删除你在github中的public-key</p><p>重新生成ssh密钥对<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">"xxx@xxx.com"</span></span><br></pre></td></tr></table></figure></p><p>接下来正常操作<br>在github上添加公钥public-key:<br>1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板<br>2、在github上添加公钥时，直接复制即可<br>3、保存</p><p>测试：<br>在终端 ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><p>确认了ssh配置没有问题之后，到git上创建一个项目：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1529321337.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>选择 New repository，然后可以看到创建界面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/15293214192.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>repository name的格式为 你git的用户名.github.io; ex：Visow.github.io<br>选中 Initialize this repository with a readme;<br>create repository!<br>创建成功后复制项目的ssh<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1529321987.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/15293220501.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>配置Deployment:<br>在hexo根目录下，打开 _config.yml配置文件，修改repository(在文件尾部)：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:Visow/Visow.github.io.git // 这里是你刚才复制的ssh</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>修改完成后需要安装一个git的拓展组建：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>创建一篇新的博客：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post <span class="string">"你好,Hexo"</span></span><br></pre></td></tr></table></figure></p><p>这时候在文件夹_posts目录下将会看到已经创建的文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1108615-20171022000508865-46787156.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>OK, 这时候可以生成部署了；<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure></p><p>该操作会生成对应的博客和提交代码到刚才创建的git项目中；<br>这时候访问https://“your git name”.github.io ，将会看到生成文章了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1108615-20171022001738037-1195721153.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p> 好了，到此为止，最基本的也是最全面的hexo+github搭建博客完结。接下来是indigo主题修改：</p><h3 id="indigo主题"><a href="#indigo主题" class="headerlink" title="indigo主题"></a>indigo主题</h3><p>主题提供者 yscoder:<a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">一个Material Design风格的Hexo主题。</a><br>再次感谢主题提供者 yscoder.<br>点击上文的链接，打开主题所在的git项目；<br>滚动页面至下方，点击文档查看：<br>！<a href="2018-6-18/1529325589.jpg"></a></p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>安装很简单，在你博客的根目录，也就是Hexo的根目录下执行一下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:yscoder/hexo-theme-indigo.git themes/indigo</span><br></pre></td></tr></table></figure></p><p>获取主题项目，安装至主题到目录下的 themes/</p><p>进入到主题目录中, 并且获取分支<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/indigo</span><br><span class="line">$ git branch</span><br></pre></td></tr></table></figure></p><p>如果只存在一个分支，可以执行下面的命令获取另一分支的主题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取远程 card 分支，并切换</span></span><br><span class="line">$ git checkout -b card origin/card</span><br><span class="line"><span class="comment"># 获取远程 master 分支，并切换</span></span><br><span class="line">$ git checkout -b master origin/master</span><br></pre></td></tr></table></figure></p><p>此命令只需执行一次，之后使用 git checkout [branch] 命令在两个主题之间切换。</p><p>依赖安装, 这次是在hexo（博客）的根目录：<br>Less : 主题默认使用 less 作为 css 预处理工具。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-renderer-less --save</span><br></pre></td></tr></table></figure></p><p>Feed : 用于生成 rss。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure></p><p>Json-content: 用于生成静态站点数据，用作站内搜索的数据源。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-json-content --save</span><br></pre></td></tr></table></figure></p><p>QRCode: 用于生成微信分享二维码。可选，不安装时会请求 jiathis Api 生成二维码。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-helper-qrcode --save</span><br></pre></td></tr></table></figure></p><p>至此安装完成，接下来是配置：</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>详细的配置还是看git上的文档，这边只给出一些基本的配置：<br>开启标签页<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure></p><p>修改 hexo/source/tags/index.md 的元数据:</p><p>layout: tags<br>comments: false</p><p>开启分类页<br>仅 card theme 支持。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure></p><p>修改 hexo/source/categories/index.md 的元数据:</p><p>layout: categories<br>comments: false</p><h5 id="站点配置"><a href="#站点配置" class="headerlink" title="站点配置"></a>站点配置</h5><p>编辑站点配置文件，hexo/_config.yml。启用主题:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: indigo</span><br></pre></td></tr></table></figure></p><h5 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了得到更好的使用体验，以下内容请务必填写完整，因为这些内容会在主题中得到展示。</span></span><br><span class="line">title: your title</span><br><span class="line">subtitle: your subtitle</span><br><span class="line">description: your description</span><br><span class="line">keywords: your keywords</span><br><span class="line">author: your name</span><br><span class="line">email: your email</span><br><span class="line">url: your site url</span><br></pre></td></tr></table></figure><h5 id="feed配置"><a href="#feed配置" class="headerlink" title="feed配置"></a>feed配置</h5><p>在hexo/_config.yml下添加如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 0</span><br></pre></td></tr></table></figure></p><h5 id="jsonContent配置"><a href="#jsonContent配置" class="headerlink" title="jsonContent配置"></a>jsonContent配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#为了节约资源，可以对 jsonContent 插件生成的数据字段进行配置，减少数据文件大小。参考 hexo-generator-json-content</span></span><br><span class="line">jsonContent:</span><br><span class="line">  meta: <span class="literal">false</span></span><br><span class="line">  pages: <span class="literal">false</span></span><br><span class="line">  posts:</span><br><span class="line">    title: <span class="literal">true</span></span><br><span class="line">    date: <span class="literal">true</span></span><br><span class="line">    path: <span class="literal">true</span></span><br><span class="line">    text: <span class="literal">true</span></span><br><span class="line">    raw: <span class="literal">false</span></span><br><span class="line">    content: <span class="literal">false</span></span><br><span class="line">    slug: <span class="literal">false</span></span><br><span class="line">    updated: <span class="literal">false</span></span><br><span class="line">    comments: <span class="literal">false</span></span><br><span class="line">    link: <span class="literal">false</span></span><br><span class="line">    permalink: <span class="literal">false</span></span><br><span class="line">    excerpt: <span class="literal">false</span></span><br><span class="line">    categories: <span class="literal">false</span></span><br><span class="line">    tags: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/06/18/2018-6-18/1529326772.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h5 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h5><p>默认配置如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home:</span><br><span class="line">    text: 主页</span><br><span class="line">    url: /</span><br><span class="line">  archives:</span><br><span class="line">    url: /archives</span><br><span class="line">  tags:</span><br><span class="line">    url: /tags</span><br><span class="line">  github:</span><br><span class="line">    url: https://github.com/yscoder</span><br><span class="line">    target: _blank</span><br><span class="line">  weibo:</span><br><span class="line">    url: http://www.weibo.com/ysweb</span><br><span class="line">    target: _blank</span><br><span class="line">  link:</span><br><span class="line">    text: 测试</span><br><span class="line">    url: /</span><br></pre></td></tr></table></figure></p><p>添加新菜单项时，在 menu 下增加子属性即可。属性说明如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line"> link:               <span class="comment"># fontawesome图标，省略前缀，本主题前缀为 icon-，必须</span></span><br><span class="line">   text: About       <span class="comment"># 菜单显示的文字，如果省略即默认与图标一致，首字母会转大写</span></span><br><span class="line">   url: /about       <span class="comment"># 链接，绝对或相对路径，必须</span></span><br><span class="line">   target: _blank    <span class="comment"># 是否跳出，省略则在当前页面打开</span></span><br></pre></td></tr></table></figure><p>fontawesome 图标已集成到主题中，你可以到 <a href="http://fontawesome.io/icons/" target="_blank" rel="noopener">这个页面</a> 挑选合适的图标。</p><p>rss<br>6.x 后移除该配置项，使用站点配置中的 feed 作为统一配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rss: /atom.xml</span><br></pre></td></tr></table></figure></p><p>favicon<br>站点 logo，显示在浏览器当前标签页左上角。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">favicon: /favicon.ico</span><br></pre></td></tr></table></figure></p><p>头像<br>位于左侧菜单上方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /img/logo.jpg</span><br></pre></td></tr></table></figure></p><p>email<br>头像下方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">email: 634206017@qq.com</span><br></pre></td></tr></table></figure></p><p>color<br>设置 Android L Chrome 浏览器状态栏颜色，不需要可去除此项或设为 false。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">color: <span class="string">'#3F51B5'</span></span><br></pre></td></tr></table></figure></p><p>标签页 (old)<br>配置标签页标题<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tags:</span><br><span class="line">  title: 标签</span><br></pre></td></tr></table></figure></p><p>页面标题 (card theme)<br>自定义归档、标签、分类页的大标题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tags_title: Tags</span><br><span class="line">archives_title: Archives</span><br><span class="line">categories_title: Categories</span><br></pre></td></tr></table></figure></p><p>文章摘要<br>可以在 Markdown 文件中加 <!--more-->以分割摘要与文章正文。未设置时，按 excerpt_length 设置截取。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文章摘要渲染方式: 为 true 时将渲染为 html，否则为文本</span></span><br><span class="line">excerpt_render: <span class="literal">false</span></span><br><span class="line"><span class="comment"># 截断长度</span></span><br><span class="line">excerpt_length: 200</span><br><span class="line"><span class="comment"># 文字正文页链接文字</span></span><br><span class="line">excerpt_link: 阅读全文...</span><br><span class="line">mathjax</span><br></pre></td></tr></table></figure></p><p>开启后，使你的站点支持公式渲染，by mathjax。 请按需开启，因为此项需要加载额外的 js 文件。<br>更具体的配置：<a href="https://github.com/yscoder/hexo-theme-indigo/wiki/%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">hexo-indigo-configure</a><br>至此主题安装成功。<br>对应着修改自己需要的配置，然后发布,最终就是本博客的效果了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说在前面&quot;&gt;&lt;a href=&quot;#说在前面&quot; class=&quot;headerlink&quot; title=&quot;说在前面&quot;&gt;&lt;/a&gt;说在前面&lt;/h2&gt;&lt;p&gt;本博客是使用Hexo + gitHub搭建的个人博客。其中致谢于以下俩位道友：&lt;br&gt;csdn z皓: &lt;a href=&quot;https://www.cnblogs.com/fengxiongZz/p/7707219.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用Hexo+github一步步搭建数以自己的博客&lt;/a&gt;&lt;br&gt;主题提供者 yscoder:&lt;a href=&quot;https://github.com/yscoder/hexo-theme-indigo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一个Material Design风格的Hexo主题。&lt;/a&gt;&lt;br&gt;首先是Hexo+gitHub的使用安装及配置问题。由于z道友教程中内容比较详细，所以这边简单的重复一下。再次感谢道友提供的教程。&lt;br&gt;然后第二部分是主题的安装。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://Visow.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
